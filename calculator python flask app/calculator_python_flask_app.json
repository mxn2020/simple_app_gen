{"name": "utils.py", "file_path": "calculator_python_flask_app/utils.py", "description": "Utility functions for mathematical calculations and unit conversions.", "features": [{"name": "Basic Arithmetic Calculations", "description": "Implement utility functions for basic arithmetic calculations like addition, subtraction, multiplication, and division."}, {"name": "Trigonometric Calculations", "description": "Include utility functions for trigonometric calculations such as sine, cosine, and tangent."}, {"name": "Exponential and Logarithmic Calculations", "description": "Provide functions for exponential and logarithmic calculations."}, {"name": "Unit Conversions", "description": "Implement utility functions for converting between different units of measurement."}, {"name": "Error Handling", "description": "Include error handling functions to manage and display errors during calculations."}, {"name": "Utility Functions for Custom Themes", "description": "Add utility functions to handle custom themes and interface customization."}], "file_path_as_array": ["calculator_python_flask_app"], "file_name": "utils.py", "code": "import math\n\n# Utility functions for mathematical calculations and unit conversions\n\ndef basic_arithmetic_operations(num1, num2, operation):\n    if operation == 'add':\n        return num1 + num2\n    elif operation == 'subtract':\n        return num1 - num2\n    elif operation == 'multiply':\n        return num1 * num2\n    elif operation == 'divide':\n        if num2 != 0:\n            return num1 / num2\n        else:\n            return \"Cannot divide by zero\"\n\ndef trigonometric_calculations(angle, func):\n    if func == 'sin':\n        return math.sin(math.radians(angle))\n    elif func == 'cos':\n        return math.cos(math.radians(angle))\n    elif func == 'tan':\n        return math.tan(math.radians(angle))\n\ndef exponential_calculation(base, power):\n    return math.pow(base, power)\n\ndef logarithmic_calculation(value):\n    return math.log(value)\n\ndef unit_conversion(value, from_unit, to_unit):\n    # Implement unit conversion logic here\n    return converted_value\n\ndef error_handling(error_message):\n    return \"Error: \" + error_message\n\ndef custom_theme_settings(theme):\n    return \"Theme selected: \" + theme", "file_instruction": "The `utils.py` file contains utility functions for mathematical calculations and unit conversions in the calculator Python Flask app. To use the file, import the necessary functions and call them as needed. For example, you can use `basic_arithmetic_operations` for arithmetic calculations, `trigonometric_calculations` for trigonometric functions, `unit_conversion` for converting between units, `error_handling` for managing errors, and `custom_theme_settings` for custom theme selection."}